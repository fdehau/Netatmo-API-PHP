Getting Started
===============

.. _PSR-4: https://www.php-fig.org/psr/psr-4
.. _Composer: https://getcomposer.org
.. _Netatmo API: https://dev.netatmo.com

Autoload
--------

The SDK comes with full `PSR-4`_ autoload support. In order to start using
classes from the SDK, you only have to require the autoload file generated by
`Composer`_.

.. code-block:: php

  require_once 'vendor/autoload.php'

Creating a Client
-------------------

The main interface with the `Netatmo API`_ is the ``Client``. In order to
create a ``Client``, you need to pass some it some configuration.

The minimal required configuration consists of the `OAuth2` credentials
that are associated with your application:

.. code-block:: php

  use Netatmo\Sdk\Config;

  $config = Config::fromArray([
    "oauth2" => [
      "client_id" => "xxxxxx",
      "client_secret" => "xxxxxx",
    ]
  ]);

Then you simply pass this configuration to the client:

.. code-block:: php

  use Netatmo\Sdk\Client;

  $client = new Client($config);

Authentication
--------------

Most the of endpoints of the `Netatmo API`_ requires you to provides an
``access_token``. It can be retrieved using the ``getTokens`` method of
the client.

Password Grant
``````````````

Tokens can be retrieved using a username and a password.

.. code-block:: php

  use Netatmo\Sdk\OAuth2;

  $grant = new OAuth2\Grants\Password("user@example.com", "P4ssword!");
  // $tokens is an instance of Netatmo\OAuth2\Tokens;
  $tokens = $client->getTokens($grant);

Authorization Code
``````````````````

Tokens can also be retrieved using an authorization code.

.. code-block:: php

  use Netatmo\Sdk\OAuth2;

  $grant = new OAuth2\Grants\AuthorizationCode("1234");
  // $tokens is an instance of Netatmo\OAuth2\Tokens;
  $tokens = $client->getTokens($grant);


Tokens lifecycle
----------------

Once the tokens have been retrieved you need to configure the ``Client``
in order to start to make your first requests.

The minimum requirement is to provide an access token.

.. code-block:: php

  // Retrieve the access token (an instance of Netatmo\Sdk\OAuth2\Token)
  $accessToken = $tokens->getAccessToken();
  $client->setAccessToken($accessToken);

You can also provides the client with a refresh token. If present it will
be used to automatically refresh the previously given access token once it
has expired.

.. code-block:: php

  // Retrieve the refresh token (an instance of Netatmo\Sdk\OAuth2\Token)
  $refreshToken = $tokens->getRefreshToken();
  $client->setRefreshToken($refreshToken);


Your first request
------------------

The client can send any request that implements the ``Netatmo\Requests\Request``
interface.

The response is an instance of ``Netatmo\Responses\Response``.

.. code-block:: php

  use Netatmo\Sdk\Requests;

  $request = Requests\Weather\Stations::getDevice("70:ee:50:2c:70:ca");
  // $response is an instance of Netatmo\Responses\Response
  $response = $client->send($request);
  $body = $response->getBody();

If you wish to receive the raw response as a PHP array you may use the ``$options``
parameter.

.. code-block:: php
  :emphasize-lines: 4

  use Netatmo\Sdk\Requests;

  $request = Requests\Weather\Stations::getDevice("70:ee:50:2c:70:ca");
  $options = Requests\Options::fromArray(["decode_body" => false]);
  // $response is an array
  $response = $client->send($request, $options);

Full example
------------

.. code-block:: php

  use Netatmo\Sdk\Client;
  use Netatmo\Sdk\Config;
  use Netatmo\Sdk\Requests;
  use Netatmo\Sdk\Exceptions;

  // Create the client
  $config = Config::fromArray([
    "oauth2" => [
      "client_id" => "xxxxxx",
      "client_secret" => "xxxxxx",
    ]
  ]);
  $client = new Client($config);

  // Retrieve OAuth2 tokens
  $grant = new OAuth2\Grants\Password("user@example.com", "P4ssword!");
  try {
    $tokens = $client->getTokens($grant);
    $client->setAccessToken($tokens->getAccessToken());
    $client->setRefreshToken($tokens->getRefreshToken());
  } catch (Exceptions\OAuth2Error $ex) {
    // Handle oauth2 error here
  }

  // Make a request
  $request = Requests\Weather\Stations::getDevice("70:ee:50:2c:70:ca");
  try {
    $response = $client->send($request);
    var_dump($response->getUser());
  } catch (\Exception $ex) {
    if ($ex instanceof Exceptions\OAuth2Error $ex) {
      // failed to refresh token
    } else if ($ex instanceof Exceptions\ApiError $ex) {
      // the api returned an error (invalid device id, invalid parameter, ...)
    } else if ($ex instanceof Exceptions\Error) {
      // the sdk encountered an error
    } else {
      // an unknown exception was thrown
    }
  }
